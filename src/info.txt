Inicio

npm i -D typescript > $ npx tsc --init

npm i fastify

npm install -D @types/node

npm install tsx -D (Converte automatizado) =>  npx tsx src/server.ts

ESLint

npm i eslint @rocketseat/eslint-config -D

Banco de Dados

SQLITE (Relacional)

Configurando o KNEX

npm install knex sqlite3

Migrations

npm run knex -- migrate:make create-document

Executar => npm run knex -- migrate:latest
RollBack => npm run knex -- migrate:rollback

npm run knex -- migrate:make add-session-id-to-transactions

create-documents

add-session-id-to-transactions

ENVS - ZOD

#Requisitos Funcionais

- O usuário deve poder criar uma transação
- O usuário deve poder obter um resumo de sua conta
- O usuário deve poder listar todas as transações que ocorreram
- O usuário dee poder visualizar uma transação única

#Regra de Negócio

- A transação pode ser do tipo crédito que somará ao valor total, ou débito que subtrairá.
- Deve ser possível identificarmos o usuário entre as requisições
- O usuário só pode visualizar transações o qual ele criou

#Requisitos não funcionais



Cookies

npm i @fastify/cookie


Testes Automatizados

Existem 2 tipos: Unitários , Integração , E2E (Ponta a Ponta)

Unitários: Testa a unidade da sua aplicação
Integração: Comunicação entre duas ou mais unidades
E2E: Simula um usuário operando na nossa aplicação


Vitest

npm i vitest -D

npm i supertest -D

npm i -D @types/supertest

Deploy 

npm i tsup -D

npm i pg (Drive do PostGress)

postgres://ignite_nodejs_02_db_rc14_user:rxYptvDFzTk8w1PJgfY9WSOSsamPrope@dpg-cn3uiaq1hbls73aee0k0-a/ignite_nodejs_02_db_rc14

 "dev": "ts-node --transpile-only --files src/server.ts"

// "dev": "tsx watch --import src/server.ts",






